---
openapi: 3.0.0
info:
  title: CLM-EXT-Services API
  version: 1.0.0
  description: API endpoints the clm-ext-services module offers
servers:
- url: "{scheme}://{hostname}:{port}{path}"
  description: The production API server
  variables:
    hostname:
      default: localhost
    port:
      default: '5004'
    path:
      default: ''
    scheme:
      default: http
security:
- bearerAuth: []
paths:
  "/services/mgmt/services":
    get:
      tags:
      - mgmt-services
      summary: 'Retrieve all services the user has access to [Minimum Role: "Learner"]'
      description: Retrieve all services the user has access to through the group
        enrollments.
      parameters:
      - "$ref": "#/components/parameters/accessToken"
      responses:
        '200':
          description: Successfully retrieved all services
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                  - "$ref": "#/components/schemas/Service"
                  - type: object
                    properties:
                      _id:
                        type: string
                        description: The id of the service.
                        example: 5f7b1a7b9b0b8a0017a7b1a7
        '400':
          description: Bad request
        '401':
          description: Unauthorized
    post:
      tags:
      - mgmt-services
      summary: 'Create a service [Minimum Role: "Admin"]'
      description: Create a service
      parameters:
      - "$ref": "#/components/parameters/accessToken"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Service"
      responses:
        '200':
          description: Successfully created learning object
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Service"
        '400':
          description: Bad request - Invalid input or validation error
        '401':
          description: Unauthorized
  "/services/mgmt/services/relations":
    get:
      tags:
      - mgmt-services
      summary: 'Get the relations from the services the user has access to [Minimum
        Role : ''Learner'']'
      description: Retrieve relations between various services that the authenticated
        user has permissions to view.
      parameters:
      - "$ref": "#/components/parameters/accessToken"
      responses:
        '200':
          description: A list of relations between services.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/relation"
  "/services/mgmt/services/{id}":
    put:
      tags:
      - mgmt-services
      summary: 'Update an existing service [Minimum Role: "Instructor"]'
      description: Modify an existing service's attributes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Service"
      parameters:
      - "$ref": "#/components/parameters/accessToken"
      - in: path
        name: id
        description: The id of the service
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successfully updated service
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Service"
        '400':
          description: Bad request - Invalid input or validation error
        '401':
          description: Unauthorized
    patch:
      tags:
      - mgmt-services
      summary: 'Update an existing service [Minimum Role: "Instructor"]'
      description: Modify an existing service's attribute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Service"
      parameters:
      - in: path
        name: id
        description: The id of the service
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successfully partially updated service
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Service"
        '400':
          description: Bad request - Invalid input or validation error
        '401':
          description: Unauthorized
    delete:
      tags:
      - mgmt-services
      summary: 'Deletes an existing service [Minimum Role: "Instructor"]'
      description: Delete an existing service
      parameters:
      - in: path
        name: id
        description: The id of the service
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Successfully deleted service
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  "/services/mgmt/groups/{id}/services/{serviceId}":
    post:
      tags:
      - mgmt-groups
      - mgmt-services
      summary: 'Enroll a group to a service [Minimum role: ''Instructor'']'
      description: Enrolls a specific group to a particular service using the respective
        identifiers.
      parameters:
      - "$ref": "#/components/parameters/accessToken"
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: serviceId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successfully enrolled the group to the service.
    delete:
      tags:
      - mgmt-groups
      - mgmt-services
      summary: 'Delete Enrollment [Minimum role: ''Instructor'']'
      description: Removes a group's enrollment to a specific service, identified
        by its serviceId.
      parameters:
      - "$ref": "#/components/parameters/accessToken"
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: serviceId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successfully deleted the group's enrollment to the service.
components:
  schemas:
    relation:
      type: object
      properties:
        fromType:
          type: string
          description: The type of the node
          default: fromTypeNode
        toType:
          type: string
          description: The type of the target node
          default: toTypeNode
        fromId:
          type: string
          description: The id of the node
          default: fromNodeId
        toId:
          type: string
          description: The id of the target node
          default: toNodeId
        order:
          type: number
          description: The order of the relation. Used for example ordering the enrollments
            of a group/user
          default: 0
    Service:
      type: object
      properties:
        baseUrl:
          type: string
          description: The base url of the service.
          example: https://example.com/api/
        username:
          type: string
          description: The username of the service.
          example: adminUser
        password:
          type: string
          description: The password of the service.
          format: password
        token:
          type: string
          description: The token of the service.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        authType:
          type: string
          enum:
          - BASIC
          - BEARER
          - OTHER
          description: The auth-type of the service.
        type:
          type: string
          enum:
          - SERVICE_TYPE_1
          - SERVICE_TYPE_2
          description: The type of the service.
        displayName:
          type: string
          description: The display name of the service.
          example: My Service
        metadataType:
          type: string
          enum:
          - LRMI
          - LOM
          description: The metadata-type of the service.
          nullable: true
  parameters:
    accessToken:
      name: x-access-token
      in: header
      description: The access token
      required: true
      example: exampleAccessToken
      schema:
        type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    refreshAuth:
      type: apiKey
      in: header
      name: x-refresh-token
tags: []
